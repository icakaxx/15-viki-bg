 Project Summary
You're building a clean, human-friendly air conditioner (AC) e-commerce site using Next.js and Supabase. The goal is to create a functional /buy page that displays products dynamically, styled using CSS Modules, and includes a working “Купи” (Buy) button that redirects to a future /checkout page using query parameters.

The app uses client-side data fetching, supports i18n, and favors responsive, minimal UI with clear spacing and mobile compatibility.

✅ TASKS (Each in Its Own Row for Cursor)
🛠️ Task 1: Build /buy Page (src/pages/buy.js)
Priority: 🔥 High
Goal: Display AC products in a clean, responsive grid layout, pulling data from /api/get-products.

Implementation Details:

Fetch product data from /api/get-products using useEffect

Display each product in a card component with:

Product Image (ImageURL)

Brand + Model

Type (Split/Mobile), CapacityBTU

Energy Rating

Price and PreviousPrice (if different)

A “Купи” button that redirects to /checkout?product=ProductID

Use CSS Modules for styling:

3 products per row on desktop

2 per row on tablet

1 per row on mobile

Wrap grid in a parent container with padding and max-width

Add a simple <h1> at the top: “Купи климатици”

🛠️ Task 2: Create CSS Module for /buy Page (src/styles/Page Styles/BuyPage.module.css)
Priority: 🔥 High
Goal: Style the /buy page grid and product cards using CSS Modules.

Key Style Rules:

.grid: Responsive grid using grid-template-columns: repeat(auto-fit, minmax(280px, 1fr))

.card: Card with padding, border, box-shadow, and rounded corners

.image: Fixed height image with object-fit: cover

.price: Font styles for current and previous prices

.button: Clean, modern buy button with hover effect

🛠️ Task 3: Update Header Navigation Link (src/components/Layout Components/Header.js)
Priority: 🔥 High
Goal: Ensure clicking “Купи климатици” in the header navigates to /buy.

Details:

Use Next.js Link:

jsx
Copy
Edit
<Link href="/buy">Купи климатици</Link>
Apply active/hover style to indicate current route

Ensure localization still works if applicable

🛠️ Task 4: Create Checkout Page (src/pages/checkout.js)
Priority: 🟡 Medium
Goal: Stub a checkout page that reads ?product=ID from the URL and shows a placeholder.

Implementation Notes:

Use useRouter from next/router to extract product query param

Display simple placeholder text: “Checkout page for product ID: ___”

Later, this will fetch full product info from Supabase based on ID

🛠️ Task 5: (Future) Create Product Detail Fetching on Checkout Page
Priority: 🟡 Medium
Goal: On the checkout page, fetch the full product data using the query param

Implementation Notes:

Use Supabase client

Query Product table where ProductID === query.product

Display product name, image, and basic info

Add a basic contact form (name, email, phone) later

🛠️ Task 6: (Future) Create Simple Contact/Order Form on /checkout
Priority: 🟡 Medium
Goal: Create a form that sends the user's interest/order via email or Supabase insert

Fields:

Name

Email

Phone

Message (optional)

Hidden field for ProductID

Shared Data Format (from /api/get-products)
json
Copy
Edit
{
  "ProductID": 1,
  "Brand": "Daikin",
  "Model": "CoolX200",
  "Colour": "White",
  "Type": "Split",
  "CapacityBTU": 12000,
  "EnergyRating": "A++",
  "Price": 850,
  "PreviousPrice": 950,
  "ImageURL": "/images/daikin-coolx200.jpg"
}
🌐 Design Guidelines
Simple, human-friendly UI — minimalistic and mobile-first

Emphasize product images, spacing, and readable text

Use CSS Modules for all styling

Buttons and interactive elements should feel modern but non-intrusive

Prioritize legibility and accessibility

📦 Stack Summary
Next.js (Pages Router currently in use)

Supabase (for data fetching)

CSS Modules (for styling)

Client-side fetch via useEffect

i18n via next-i18next

Deployment-ready

After doing that ensure that this is possible also when switched to EN or BG